
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  00010a74  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  00010a74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a74  00010a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a70  08000a70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a74  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a74  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000106d  00000000  00000000  00010ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000415  00000000  00000000  00011b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000110  00000000  00000000  00011f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000be  00000000  00000000  00012080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000260c  00000000  00000000  0001213e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000016b6  00000000  00000000  0001474a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009593  00000000  00000000  00015e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000368  00000000  00000000  0001f394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0001f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a48 	.word	0x08000a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a48 	.word	0x08000a48

080001c8 <SPI2_GPIOInits>:
//void Gpio_Config(GPIO_Handle_t Gpio,GPIO_RegDef_t * pGPIOx )


//This function is used to initialize the gpio pins to behave as SPI2 pins
void SPI2_GPIOInits()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
     * PB12  --> NSS
     * ALT fun mode : 5
     */
	GPIO_Handle_t SPI2_Pins;

	SPI2_Pins.pGPIOx = GPIOB;
 80001ce:	4b14      	ldr	r3, [pc, #80]	; (8000220 <SPI2_GPIOInits+0x58>)
 80001d0:	607b      	str	r3, [r7, #4]
	SPI2_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001d2:	2302      	movs	r3, #2
 80001d4:	727b      	strb	r3, [r7, #9]
	SPI2_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001d6:	2305      	movs	r3, #5
 80001d8:	737b      	strb	r3, [r7, #13]
	SPI2_Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 80001da:	2300      	movs	r3, #0
 80001dc:	733b      	strb	r3, [r7, #12]
	SPI2_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001de:	2300      	movs	r3, #0
 80001e0:	72fb      	strb	r3, [r7, #11]
	SPI2_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001e2:	2302      	movs	r3, #2
 80001e4:	72bb      	strb	r3, [r7, #10]

	//SCLK'
	SPI2_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001e6:	230d      	movs	r3, #13
 80001e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2_Pins);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f971 	bl	80004d4 <GPIO_Init>

	//MOSI
	SPI2_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80001f2:	230f      	movs	r3, #15
 80001f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2_Pins);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f96b 	bl	80004d4 <GPIO_Init>

	//MISO
	SPI2_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80001fe:	230e      	movs	r3, #14
 8000200:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2_Pins);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f965 	bl	80004d4 <GPIO_Init>

	//NSS
	SPI2_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800020a:	230c      	movs	r3, #12
 800020c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2_Pins);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f95f 	bl	80004d4 <GPIO_Init>
}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40020400 	.word	0x40020400

08000224 <SPI2_Inits>:

void SPI2_Inits()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <SPI2_Inits+0x38>)
 800022c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800022e:	2301      	movs	r3, #1
 8000230:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000232:	2301      	movs	r3, #1
 8000234:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000236:	2300      	movs	r3, #0
 8000238:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800023e:	2300      	movs	r3, #0
 8000240:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000246:	2301      	movs	r3, #1
 8000248:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fb0b 	bl	8000868 <SPI_Init>

}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40003800 	.word	0x40003800

08000260 <main>:

int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
   char userData[] = "HelloWorld!";
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <main+0x40>)
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	ca07      	ldmia	r2, {r0, r1, r2}
 800026c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   SPI2_GPIOInits();
 8000270:	f7ff ffaa 	bl	80001c8 <SPI2_GPIOInits>
   SPI2_Inits();
 8000274:	f7ff ffd6 	bl	8000224 <SPI2_Inits>

   /* This makes NSS signal internally  high and avoid MODF error */
   SPI_SSIConfig(SPI2, ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <main+0x44>)
 800027c:	f000 fba3 	bl	80009c6 <SPI_SSIConfig>

   //Enable SPI2 Peripheral
   SPI_PeripheralControl(SPI2, ENABLE);
 8000280:	2101      	movs	r1, #1
 8000282:	4808      	ldr	r0, [pc, #32]	; (80002a4 <main+0x44>)
 8000284:	f000 fb83 	bl	800098e <SPI_PeripheralControl>
   SPI_SendData(SPI2,(uint8_t*)userData, sizeof(userData));
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	220c      	movs	r2, #12
 800028c:	4619      	mov	r1, r3
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0x44>)
 8000290:	f000 fb45 	bl	800091e <SPI_SendData>
   SPI_PeripheralControl(SPI2, DISABLE);
 8000294:	2100      	movs	r1, #0
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <main+0x44>)
 8000298:	f000 fb79 	bl	800098e <SPI_PeripheralControl>
   while(1)
 800029c:	e7fe      	b.n	800029c <main+0x3c>
 800029e:	bf00      	nop
 80002a0:	08000a60 	.word	0x08000a60
 80002a4:	40003800 	.word	0x40003800

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fb93 	bl	8000a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffc1 	bl	8000260 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <GPIO_PeriClockControl>:
 *      Author: Salman
 */
#include "stm32f407xx_gpio_driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d162      	bne.n	80003d4 <GPIO_PeriClockControl+0xd8>
    {
        if (pGPIOx == GPIOA)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a66      	ldr	r2, [pc, #408]	; (80004ac <GPIO_PeriClockControl+0x1b0>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 8000316:	4b66      	ldr	r3, [pc, #408]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a65      	ldr	r2, [pc, #404]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
        else if (pGPIOx == GPIOI)
        {
            GPIOI_PCLK_DI();
        }
    }
}
 8000322:	e0bc      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOB)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a63      	ldr	r2, [pc, #396]	; (80004b4 <GPIO_PeriClockControl+0x1b8>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 800032c:	4b60      	ldr	r3, [pc, #384]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a5f      	ldr	r2, [pc, #380]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000338:	e0b1      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOC)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a5e      	ldr	r2, [pc, #376]	; (80004b8 <GPIO_PeriClockControl+0x1bc>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 8000342:	4b5b      	ldr	r3, [pc, #364]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a5a      	ldr	r2, [pc, #360]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034e:	e0a6      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOD)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a5a      	ldr	r2, [pc, #360]	; (80004bc <GPIO_PeriClockControl+0x1c0>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 8000358:	4b55      	ldr	r3, [pc, #340]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a54      	ldr	r2, [pc, #336]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e09b      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOE)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a55      	ldr	r2, [pc, #340]	; (80004c0 <GPIO_PeriClockControl+0x1c4>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 800036e:	4b50      	ldr	r3, [pc, #320]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a4f      	ldr	r2, [pc, #316]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e090      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOF)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a51      	ldr	r2, [pc, #324]	; (80004c4 <GPIO_PeriClockControl+0x1c8>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x96>
            GPIOF_PCLK_EN();
 8000384:	4b4a      	ldr	r3, [pc, #296]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a49      	ldr	r2, [pc, #292]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e085      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOG)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a4c      	ldr	r2, [pc, #304]	; (80004c8 <GPIO_PeriClockControl+0x1cc>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0xac>
            GPIOG_PCLK_EN();
 800039a:	4b45      	ldr	r3, [pc, #276]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a44      	ldr	r2, [pc, #272]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e07a      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOH)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a48      	ldr	r2, [pc, #288]	; (80004cc <GPIO_PeriClockControl+0x1d0>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0xc2>
            GPIOH_PCLK_EN();
 80003b0:	4b3f      	ldr	r3, [pc, #252]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a3e      	ldr	r2, [pc, #248]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e06f      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOI)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a43      	ldr	r2, [pc, #268]	; (80004d0 <GPIO_PeriClockControl+0x1d4>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d16b      	bne.n	800049e <GPIO_PeriClockControl+0x1a2>
            GPIOI_PCLK_EN();
 80003c6:	4b3a      	ldr	r3, [pc, #232]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a39      	ldr	r2, [pc, #228]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e064      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
    else if (EnorDi == DISABLE)
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d161      	bne.n	800049e <GPIO_PeriClockControl+0x1a2>
        if (pGPIOx == GPIOA)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a33      	ldr	r2, [pc, #204]	; (80004ac <GPIO_PeriClockControl+0x1b0>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0xf4>
            GPIOA_PCLK_DI();
 80003e2:	4b33      	ldr	r3, [pc, #204]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003e8:	f023 0301 	bic.w	r3, r3, #1
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e056      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOB)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a30      	ldr	r2, [pc, #192]	; (80004b4 <GPIO_PeriClockControl+0x1b8>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x10a>
            GPIOB_PCLK_DI();
 80003f8:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a2c      	ldr	r2, [pc, #176]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 80003fe:	f023 0302 	bic.w	r3, r3, #2
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e04b      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOC)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a2b      	ldr	r2, [pc, #172]	; (80004b8 <GPIO_PeriClockControl+0x1bc>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x120>
            GPIOC_PCLK_DI();
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a27      	ldr	r2, [pc, #156]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000414:	f023 0304 	bic.w	r3, r3, #4
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e040      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOD)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a27      	ldr	r2, [pc, #156]	; (80004bc <GPIO_PeriClockControl+0x1c0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0x136>
            GPIOD_PCLK_DI();
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a21      	ldr	r2, [pc, #132]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800042a:	f023 0308 	bic.w	r3, r3, #8
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e035      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOE)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <GPIO_PeriClockControl+0x1c4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0x14c>
            GPIOE_PCLK_DI();
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000440:	f023 0310 	bic.w	r3, r3, #16
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e02a      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOF)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <GPIO_PeriClockControl+0x1c8>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x162>
            GPIOF_PCLK_DI();
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000456:	f023 0320 	bic.w	r3, r3, #32
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e01f      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOG)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <GPIO_PeriClockControl+0x1cc>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0x178>
            GPIOG_PCLK_DI();
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800046c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e014      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOH)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a15      	ldr	r2, [pc, #84]	; (80004cc <GPIO_PeriClockControl+0x1d0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0x18e>
            GPIOH_PCLK_DI();
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e009      	b.n	800049e <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOI)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <GPIO_PeriClockControl+0x1d4>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d105      	bne.n	800049e <GPIO_PeriClockControl+0x1a2>
            GPIOI_PCLK_DI();
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40020000 	.word	0x40020000
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40020400 	.word	0x40020400
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40020c00 	.word	0x40020c00
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40021400 	.word	0x40021400
 80004c8:	40021800 	.word	0x40021800
 80004cc:	40021c00 	.word	0x40021c00
 80004d0:	40022000 	.word	0x40022000

080004d4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]

	//Peripheral clock enable
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2101      	movs	r1, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff08 	bl	80002fc <GPIO_PeriClockControl>
   // 1 . configure the mode of the GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d821      	bhi.n	8000538 <GPIO_Init+0x64>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	4619      	mov	r1, r3
 8000512:	2303      	movs	r3, #3
 8000514:	408b      	lsls	r3, r1
 8000516:	43db      	mvns	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	400a      	ands	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6819      	ldr	r1, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	e086      	b.n	8000646 <GPIO_Init+0x172>
	}
	else
	{
		//This part will be done later (Interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	795b      	ldrb	r3, [r3, #5]
 800053c:	2b04      	cmp	r3, #4
 800053e:	d117      	bne.n	8000570 <GPIO_Init+0x9c>
		{
			//1. Configure for FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b92      	ldr	r3, [pc, #584]	; (800078c <GPIO_Init+0x2b8>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a8e      	ldr	r2, [pc, #568]	; (800078c <GPIO_Init+0x2b8>)
 8000552:	430b      	orrs	r3, r1
 8000554:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000556:	4b8d      	ldr	r3, [pc, #564]	; (800078c <GPIO_Init+0x2b8>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	43d2      	mvns	r2, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a88      	ldr	r2, [pc, #544]	; (800078c <GPIO_Init+0x2b8>)
 800056a:	400b      	ands	r3, r1
 800056c:	6093      	str	r3, [r2, #8]
 800056e:	e01a      	b.n	80005a6 <GPIO_Init+0xd2>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	795b      	ldrb	r3, [r3, #5]
 8000574:	2b05      	cmp	r3, #5
 8000576:	d116      	bne.n	80005a6 <GPIO_Init+0xd2>
		{
			//1.Configure for RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	4b84      	ldr	r3, [pc, #528]	; (800078c <GPIO_Init+0x2b8>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	4611      	mov	r1, r2
 8000588:	4a80      	ldr	r2, [pc, #512]	; (800078c <GPIO_Init+0x2b8>)
 800058a:	430b      	orrs	r3, r1
 800058c:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058e:	4b7f      	ldr	r3, [pc, #508]	; (800078c <GPIO_Init+0x2b8>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	43d2      	mvns	r2, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4a7a      	ldr	r2, [pc, #488]	; (800078c <GPIO_Init+0x2b8>)
 80005a2:	400b      	ands	r3, r1
 80005a4:	60d3      	str	r3, [r2, #12]
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
		{
			//1. Configure for RTSR & FTSR
		}
		//2.Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a74      	ldr	r2, [pc, #464]	; (8000790 <GPIO_Init+0x2bc>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d024      	beq.n	800060c <GPIO_Init+0x138>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a73      	ldr	r2, [pc, #460]	; (8000794 <GPIO_Init+0x2c0>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d01d      	beq.n	8000608 <GPIO_Init+0x134>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a71      	ldr	r2, [pc, #452]	; (8000798 <GPIO_Init+0x2c4>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d016      	beq.n	8000604 <GPIO_Init+0x130>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a70      	ldr	r2, [pc, #448]	; (800079c <GPIO_Init+0x2c8>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d00f      	beq.n	8000600 <GPIO_Init+0x12c>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a6e      	ldr	r2, [pc, #440]	; (80007a0 <GPIO_Init+0x2cc>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d008      	beq.n	80005fc <GPIO_Init+0x128>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a6d      	ldr	r2, [pc, #436]	; (80007a4 <GPIO_Init+0x2d0>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d101      	bne.n	80005f8 <GPIO_Init+0x124>
 80005f4:	2305      	movs	r3, #5
 80005f6:	e00a      	b.n	800060e <GPIO_Init+0x13a>
 80005f8:	2300      	movs	r3, #0
 80005fa:	e008      	b.n	800060e <GPIO_Init+0x13a>
 80005fc:	2304      	movs	r3, #4
 80005fe:	e006      	b.n	800060e <GPIO_Init+0x13a>
 8000600:	2303      	movs	r3, #3
 8000602:	e004      	b.n	800060e <GPIO_Init+0x13a>
 8000604:	2302      	movs	r3, #2
 8000606:	e002      	b.n	800060e <GPIO_Init+0x13a>
 8000608:	2301      	movs	r3, #1
 800060a:	e000      	b.n	800060e <GPIO_Init+0x13a>
 800060c:	2300      	movs	r3, #0
 800060e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000610:	4b65      	ldr	r3, [pc, #404]	; (80007a8 <GPIO_Init+0x2d4>)
 8000612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000614:	4a64      	ldr	r2, [pc, #400]	; (80007a8 <GPIO_Init+0x2d4>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 800061c:	7c7a      	ldrb	r2, [r7, #17]
 800061e:	7cbb      	ldrb	r3, [r7, #18]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	fa02 f103 	lsl.w	r1, r2, r3
 8000626:	4a61      	ldr	r2, [pc, #388]	; (80007ac <GPIO_Init+0x2d8>)
 8000628:	7cfb      	ldrb	r3, [r7, #19]
 800062a:	3302      	adds	r3, #2
 800062c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. Enable the EXTI interrupt delivery using IMR (Interrupt mask register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000630:	4b56      	ldr	r3, [pc, #344]	; (800078c <GPIO_Init+0x2b8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7912      	ldrb	r2, [r2, #4]
 8000638:	4611      	mov	r1, r2
 800063a:	2201      	movs	r2, #1
 800063c:	408a      	lsls	r2, r1
 800063e:	4611      	mov	r1, r2
 8000640:	4a52      	ldr	r2, [pc, #328]	; (800078c <GPIO_Init+0x2b8>)
 8000642:	430b      	orrs	r3, r1
 8000644:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]

	// 2. Configure the Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	799b      	ldrb	r3, [r3, #6]
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	2303      	movs	r3, #3
 800066a:	408b      	lsls	r3, r1
 800066c:	43db      	mvns	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	400a      	ands	r2, r1
 8000676:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6899      	ldr	r1, [r3, #8]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	430a      	orrs	r2, r1
 8000686:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

	// 3 . Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	79db      	ldrb	r3, [r3, #7]
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	68da      	ldr	r2, [r3, #12]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	4619      	mov	r1, r3
 80006aa:	2303      	movs	r3, #3
 80006ac:	408b      	lsls	r3, r1
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	400a      	ands	r2, r1
 80006b8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	68d9      	ldr	r1, [r3, #12]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	60da      	str	r2, [r3, #12]

	temp = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

	//4 . configure the ouput type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	4619      	mov	r1, r3
 80006ea:	2301      	movs	r3, #1
 80006ec:	408b      	lsls	r3, r1
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	400a      	ands	r2, r1
 80006f8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6859      	ldr	r1, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	430a      	orrs	r2, r1
 8000708:	605a      	str	r2, [r3, #4]

	temp = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]

	//5. Configure alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	795b      	ldrb	r3, [r3, #5]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d135      	bne.n	8000782 <GPIO_Init+0x2ae>
	{
		//configure the alt function register
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &=  ~(0xFf << (4*temp2));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	7c3b      	ldrb	r3, [r7, #16]
 800072e:	3308      	adds	r3, #8
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	21ff      	movs	r1, #255	; 0xff
 800073c:	fa01 f303 	lsl.w	r3, r1, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	7c3b      	ldrb	r3, [r7, #16]
 800074a:	4002      	ands	r2, r0
 800074c:	3308      	adds	r3, #8
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	7c3b      	ldrb	r3, [r7, #16]
 800075a:	3308      	adds	r3, #8
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a5b      	ldrb	r3, [r3, #9]
 8000766:	4619      	mov	r1, r3
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	4618      	mov	r0, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	7c3b      	ldrb	r3, [r7, #16]
 8000778:	4302      	orrs	r2, r0
 800077a:	3308      	adds	r3, #8
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	440b      	add	r3, r1
 8000780:	605a      	str	r2, [r3, #4]
	}
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40013c00 	.word	0x40013c00
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40021400 	.word	0x40021400
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40013800 	.word	0x40013800

080007b0 <SPI_PeriClockControl>:
 *      Author: salman
 */
#include "stm32f407xx_spi_driver.h"

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d120      	bne.n	8000804 <SPI_PeriClockControl+0x54>
    {
        if (pSPIx == SPI1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a24      	ldr	r2, [pc, #144]	; (8000858 <SPI_PeriClockControl+0xa8>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <SPI_PeriClockControl+0x28>
        {
        	SPI1_PCLK_EN();
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <SPI_PeriClockControl+0xac>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <SPI_PeriClockControl+0xac>)
 80007d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
        else if (pSPIx == SPI3)
        {
        	SPI3_PCLK_DI();
        }
    }
}
 80007d6:	e038      	b.n	800084a <SPI_PeriClockControl+0x9a>
        else if (pSPIx == SPI2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SPI_PeriClockControl+0xb0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <SPI_PeriClockControl+0x3e>
        	SPI2_PCLK_EN();
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <SPI_PeriClockControl+0xac>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <SPI_PeriClockControl+0xac>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ec:	e02d      	b.n	800084a <SPI_PeriClockControl+0x9a>
        else if (pSPIx == SPI3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <SPI_PeriClockControl+0xb4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d129      	bne.n	800084a <SPI_PeriClockControl+0x9a>
        	SPI3_PCLK_EN();
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <SPI_PeriClockControl+0xac>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <SPI_PeriClockControl+0xac>)
 80007fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000802:	e022      	b.n	800084a <SPI_PeriClockControl+0x9a>
    else if (EnorDi == DISABLE)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d11f      	bne.n	800084a <SPI_PeriClockControl+0x9a>
        if (pSPIx == SPI1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <SPI_PeriClockControl+0xa8>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <SPI_PeriClockControl+0x70>
        	SPI1_PCLK_DI();
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <SPI_PeriClockControl+0xac>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <SPI_PeriClockControl+0xac>)
 8000818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800081e:	e014      	b.n	800084a <SPI_PeriClockControl+0x9a>
        else if (pSPIx == SPI2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <SPI_PeriClockControl+0xb0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d106      	bne.n	8000836 <SPI_PeriClockControl+0x86>
        	SPI2_PCLK_DI();
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <SPI_PeriClockControl+0xac>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <SPI_PeriClockControl+0xac>)
 800082e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000834:	e009      	b.n	800084a <SPI_PeriClockControl+0x9a>
        else if (pSPIx == SPI3)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SPI_PeriClockControl+0xb4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d105      	bne.n	800084a <SPI_PeriClockControl+0x9a>
        	SPI3_PCLK_DI();
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <SPI_PeriClockControl+0xac>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a06      	ldr	r2, [pc, #24]	; (800085c <SPI_PeriClockControl+0xac>)
 8000844:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40013000 	.word	0x40013000
 800085c:	40023800 	.word	0x40023800
 8000860:	40003800 	.word	0x40003800
 8000864:	40003c00 	.word	0x40003c00

08000868 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	//First Configure SPI_CR_1 register
	uint32_t tempRegister = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]

	//Peripheral clock initailization
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff98 	bl	80007b0 <SPI_PeriClockControl>

	//1. Configure the Device mode
	tempRegister |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4313      	orrs	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]

	//2.Configure Bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d104      	bne.n	80008a0 <SPI_Init+0x38>
	{
		//BIDI mode shuld be cleared
		tempRegister &= ~(1 << SPI_CR1_BIDIMODE);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e014      	b.n	80008ca <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d104      	bne.n	80008b2 <SPI_Init+0x4a>
	{
		//BIDI mode shuld be set
		tempRegister |= (1 << SPI_CR1_BIDIMODE);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e00b      	b.n	80008ca <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d107      	bne.n	80008ca <SPI_Init+0x62>
	{
		//BIDI mode shuld be clear
		tempRegister &= ~(1 << SPI_CR1_BIDIMODE);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008c0:	60fb      	str	r3, [r7, #12]
		//Rx Only bit must be set
		tempRegister |= (1 << SPI_CR1_RXONLY);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c8:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI serial clock speed (baud rate)
	tempRegister |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	799b      	ldrb	r3, [r3, #6]
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	461a      	mov	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempRegister |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	79db      	ldrb	r3, [r3, #7]
 80008dc:	02db      	lsls	r3, r3, #11
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempRegister |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7a1b      	ldrb	r3, [r3, #8]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempRegister |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7a5b      	ldrb	r3, [r3, #9]
 80008f8:	461a      	mov	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

	//7.Configure the SSM
	tempRegister |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7a9b      	ldrb	r3, [r3, #10]
 8000904:	025b      	lsls	r3, r3, #9
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->SPI_CR1 = tempRegister;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	601a      	str	r2, [r3, #0]

}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <SPI_SendData>:


void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuff,uint32_t Len)
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800092a:	e026      	b.n	800097a <SPI_SendData+0x5c>
	{
		//1. wait until TXE is set
		while(!(pSPIx->SPI_SR & (1 << 1)) );
 800092c:	bf00      	nop
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f9      	beq.n	800092e <SPI_SendData+0x10>

		//2. Check the DFF bit in CR1
		if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF))
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00e      	beq.n	8000964 <SPI_SendData+0x46>
		{
			//16 bit DFF
			//1.Load the data into data register (DR)
			pSPIx->SPI_DR = *((uint16_t*)pTxBuff);
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	60da      	str	r2, [r3, #12]
			Len--;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
			Len--;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3b01      	subs	r3, #1
 800095a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuff++;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	3301      	adds	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	e00a      	b.n	800097a <SPI_SendData+0x5c>
		}
		else
		{
			//8 bit DFF
			pSPIx->SPI_DR = *(pTxBuff);
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	60da      	str	r2, [r3, #12]
			Len--;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3b01      	subs	r3, #1
 8000972:	607b      	str	r3, [r7, #4]
			pTxBuff++;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3301      	adds	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1d5      	bne.n	800092c <SPI_SendData+0xe>
		}
	}
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d106      	bne.n	80009ae <SPI_PeripheralControl+0x20>
	{
		pSPIx->SPI_CR1 |= (1 << SPI_CR1_SPE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80009ac:	e005      	b.n	80009ba <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d106      	bne.n	80009e6 <SPI_SSIConfig+0x20>
	{
		pSPIx->SPI_CR1 |= (1 << SPI_CR1_SSI);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 80009e4:	e005      	b.n	80009f2 <SPI_SSIConfig+0x2c>
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <__libc_init_array>:
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4d0d      	ldr	r5, [pc, #52]	; (8000a38 <__libc_init_array+0x38>)
 8000a04:	4c0d      	ldr	r4, [pc, #52]	; (8000a3c <__libc_init_array+0x3c>)
 8000a06:	1b64      	subs	r4, r4, r5
 8000a08:	10a4      	asrs	r4, r4, #2
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	42a6      	cmp	r6, r4
 8000a0e:	d109      	bne.n	8000a24 <__libc_init_array+0x24>
 8000a10:	4d0b      	ldr	r5, [pc, #44]	; (8000a40 <__libc_init_array+0x40>)
 8000a12:	4c0c      	ldr	r4, [pc, #48]	; (8000a44 <__libc_init_array+0x44>)
 8000a14:	f000 f818 	bl	8000a48 <_init>
 8000a18:	1b64      	subs	r4, r4, r5
 8000a1a:	10a4      	asrs	r4, r4, #2
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	42a6      	cmp	r6, r4
 8000a20:	d105      	bne.n	8000a2e <__libc_init_array+0x2e>
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a28:	4798      	blx	r3
 8000a2a:	3601      	adds	r6, #1
 8000a2c:	e7ee      	b.n	8000a0c <__libc_init_array+0xc>
 8000a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a32:	4798      	blx	r3
 8000a34:	3601      	adds	r6, #1
 8000a36:	e7f2      	b.n	8000a1e <__libc_init_array+0x1e>
 8000a38:	08000a6c 	.word	0x08000a6c
 8000a3c:	08000a6c 	.word	0x08000a6c
 8000a40:	08000a6c 	.word	0x08000a6c
 8000a44:	08000a70 	.word	0x08000a70

08000a48 <_init>:
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4a:	bf00      	nop
 8000a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4e:	bc08      	pop	{r3}
 8000a50:	469e      	mov	lr, r3
 8000a52:	4770      	bx	lr

08000a54 <_fini>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr
